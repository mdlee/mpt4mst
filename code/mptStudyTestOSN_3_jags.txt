# MPT old/similar/new study/test
# basic model
model{
  # Individual
  for (i in 1:nParticipants){
    z[i] ~ dcat(phi)
    rho[i] ~ dnorm(muRho, 1/sigmaRho^2)T(0, 1)
    psi[i] ~ dnorm(muPsi, 1/sigmaPsi^2)T(0, 1)
    gammaO[i] ~ dnorm(muGammaO, 1/sigmaGammaO^2)T(0, 1)
    gammaS[i] ~ dnorm(muGammaS, 1/sigmaGammaS^2)T(0, 1)
    gammaN[i] = max(0.01, 1-gammaO[i]-gammaS[i])
    for (j in 1:nLures){
      delta[i, j] ~ dnorm(muDelta[j], 1/sigmaDelta[j]^2)T(0, 1)
    }
  }
  # Group
  phi ~ ddirch(rep(1, 5))
  muRho ~ dunif(0, 1)
  sigmaRho ~ dunif(0, 1)
  muPsi ~ dunif(0, 1)
  sigmaPsi ~ dunif(0, 1)
  muGammaO~ dunif(0, 1)
  sigmaGammaO ~ dunif(0, 1)
  muGammaS~ dunif(0, 1)
  sigmaGammaS ~ dunif(0, 1)
  for (j in 1:nLures){
    muDeltaTmp[j] ~ dunif(0, 1)
    sigmaDelta[j] ~ dunif(0, 1)
  }
  muDelta = sort(muDeltaTmp)
  # Representative
  rhoRep ~ dnorm(muRho, 1/sigmaRho^2)T(0, 1)
  psiRep ~ dnorm(muPsi, 1/sigmaPsi^2)T(0, 1)
  gammaORep ~ dnorm(muGammaO, 1/sigmaGammaO^2)T(0, 1)
  gammaSRep ~ dnorm(muGammaS, 1/sigmaGammaS^2)T(0, 1)
  gammaNRep = max(0.01, 1-gammaORep-gammaSRep)
  for (j in 1:nLures){
    deltaRep[j] ~ dnorm(muDelta[j], 1/sigmaDelta[j]^2)T(0, 1)
  }
  # Data
  for (t in 1:nTotalTrials){
    # theta is probability of old/new/similar response 
    # for 1 = old, 2 = new, 3 = lure stimuli
    theta[t, 1:3, 1] = c(rho[p[t]] + (1-rho[p[t]])*gammaO[p[t]],
                        (1-rho[p[t]])*gammaN[p[t]],
                        (1-rho[p[t]])*gammaS[p[t]])
    theta[t, 1:3, 2] = c((1-psi[p[t]])*gammaO[p[t]],
                         psi[p[t]] + (1-psi[p[t]])*gammaN[p[t]],
                         (1-psi[p[t]])*gammaS[p[t]]) 
    theta[t, 1:3, 3] = c(rho[p[t]]*(1-delta[p[t], lureBin[t]]) + (1-rho[p[t]])*gammaO[p[t]],
                        (1-rho[p[t]])*gammaN[p[t]],
                        rho[p[t]]*delta[p[t], lureBin[t]] + (1-rho[p[t]])*gammaS[p[t]])
    y[t] ~ dcat(equals(z[p[t]], 1)*theta[t, , truth[t]] 
               + equals(z[p[t]], 2)*c(1/3, 1/3, 1/3)
               + equals(z[p[t]], 3)*c(0.98, 0.01, 0.01)
               + equals(z[p[t]], 4)*c(0.01, 0.98, 0.01)
               + equals(z[p[t]], 5)*c(0.01, 0.01, 0.98))
  }
  # Posterior predictive
  for (i in 1:nParticipants){
    ppO[i, 1] = rho[i] + (1-rho[i])*gammaO[i]
    ppS[i, 1] = (1-rho[i])*gammaS[i]
    for (j in 1:nLures){
      ppO[i, j+1] = rho[i]*(1-delta[i, j]) + (1-rho[i])*gammaO[i]
      ppS[i, j+1] = rho[i]*delta[i, j] + (1-rho[i])*gammaS[i]
    }
    ppO[i, nLures+2] = (1-psi[i])*gammaO[i]
    ppS[i, nLures+2] = (1-psi[i])*gammaS[i]
  }
}
